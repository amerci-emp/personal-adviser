// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password
  accounts      Account[]
  sessions      Session[]
  statements    Statement[]
  categories    Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Application Specific Models ---

enum StatementStatus {
  UPLOADED
  PROCESSING
  REVIEW_NEEDED
  COMPLETED
  FAILED
}

model Statement {
  id                String          @id @default(cuid())
  userId            String
  filename          String
  uploadTimestamp   DateTime        @default(now())
  status            StatementStatus @default(UPLOADED)
  processedTimestamp DateTime?      
  errorMessage      String?         
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@index([userId])
}

model Transaction {
  id             String    @id @default(cuid())
  statementId    String
  transactionDate DateTime?
  description    String    // Raw description from OCR/parsing
  amount         Float     // Use Float for SQLite, consider Decimal for others
  categoryId     String?
  originalText   String?   // Store the specific line/text it was parsed from
  needsReview    Boolean   @default(false)
  
  statement      Statement @relation(fields: [statementId], references: [id], onDelete: Cascade)
  category       Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([statementId])
  @@index([categoryId])
}

model Category {
  id          String        @id @default(cuid())
  userId      String
  name        String        // e.g., "Groceries", "Rent", "Salary"
  description String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name]) // User cannot have duplicate category names
}
